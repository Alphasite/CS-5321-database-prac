package db.query.visitors;

import db.Utilities.Pair;
import db.Utilities.UnionFind;
import db.query.TablePair;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.conditional.OrExpression;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.statement.select.SubSelect;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

/**
 * Expression visitor for logical query building. Analyzes an AND based WHERE expression and generates optimal
 * selection bounds for every attribute by merging constraints.
 */
public class WhereDecomposer implements ExpressionVisitor {
    private UnionFind unionFind;

    /**
     * Leftover join expressions (such as R.A < S.D).
     */
    private List<Pair<TablePair, Expression>> unusableExpressions;

    private Expression nakedExpression;

    private Queue<String> referencedAttributes;

    public WhereDecomposer() {
        this(new UnionFind());
    }

    public WhereDecomposer(UnionFind unionFind) {
        this.unionFind = unionFind;
        this.nakedExpression = null;
        this.unusableExpressions = new ArrayList<>();

        this.referencedAttributes = new ArrayDeque<>();
    }

    /**
     * @return the where expression without breaking it down into join and filter expressions
     */
    public Expression getNakedExpression() {
        return nakedExpression;
    }

    /**
     * @return the table-table expressions which can't be added to the union find.
     */
    public List<Pair<TablePair, Expression>> getUnusableExpressions() {
        return unusableExpressions;
    }

    /**
     * @return get the union find generated by this decomposer.
     */
    public UnionFind getUnionFind() {
        return unionFind;
    }

    /**
     * Process a comparison node by retrieving referenced tables from the stack.
     *
     * @param comparator the comparator which contains the expression
     * @param isEquals   whether or not the expression is an equals statement
     */
    private void processComparator(BinaryExpression comparator, boolean isEquals) {
        comparator.getLeftExpression().accept(this);
        comparator.getRightExpression().accept(this);

        // Handle constant expressions (not needed for spec)
        if (referencedAttributes.size() == 0) {
            if (nakedExpression != null) {
                nakedExpression = new AndExpression(nakedExpression, comparator);
            } else {
                nakedExpression = comparator;
            }
        } else if (referencedAttributes.size() == 1) {
            // Att (comp) val expressions are used to update selection bounds for group of Att

            String attribute = referencedAttributes.poll();
            ExpressionBoundsBuilderVisitor.progressivelyBuildUnionBounds(unionFind, comparator);
        } else {
            // Att1 = Att2 statements are used to merge attribute bounds sets
            // Anything else is unusable : store it in separate list

            String att1 = referencedAttributes.poll();
            String att2 = referencedAttributes.poll();

            if (att1 == null || att2 == null) {
                throw new RuntimeException("Join expression has an unexpectedly null column.");
            }

            if (isEquals) {
                unionFind.union(att1, att2);
            } else {
                String table1 = att1.substring(0, att1.indexOf("."));
                String table2 = att2.substring(0, att2.indexOf("."));
                TablePair pair = new TablePair(table1, table2);
                unusableExpressions.add(new Pair<>(pair, comparator));
            }
        }
    }

    /**
     * @inheritDoc
     */
    @Override
    public void visit(Column column) {
        this.referencedAttributes.offer(column.getWholeColumnName());
    }

    /**
     * @inheritDoc
     */
    @Override
    public void visit(AndExpression andExpression) {
        andExpression.getLeftExpression().accept(this);
        andExpression.getRightExpression().accept(this);
    }


    ////////////////////////////////////////////////////
    // Trivial
    ////////////////////////////////////////////////////

    @Override
    public void visit(LongValue longValue) {

    }

    @Override
    public void visit(EqualsTo equalsTo) {
        processComparator(equalsTo, true);
    }

    @Override
    public void visit(GreaterThan greaterThan) {
        processComparator(greaterThan, false);
    }

    @Override
    public void visit(GreaterThanEquals greaterThanEquals) {
        processComparator(greaterThanEquals, false);
    }

    @Override
    public void visit(MinorThan minorThan) {
        processComparator(minorThan, false);
    }

    @Override
    public void visit(MinorThanEquals minorThanEquals) {
        processComparator(minorThanEquals, false);
    }

    @Override
    public void visit(NotEqualsTo notEqualsTo) {
        processComparator(notEqualsTo, false);
    }

    @Override
    public void visit(Parenthesis parenthesis) {
        parenthesis.getExpression().accept(this);
    }

    ////////////////////////////////////////////////////
    // Not used.
    ////////////////////////////////////////////////////

    @Override
    public void visit(OrExpression orExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Addition addition) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Division division) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Multiplication multiplication) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Subtraction subtraction) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Between between) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(InExpression inExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(IsNullExpression isNullExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(LikeExpression likeExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(NullValue nullValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Function function) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(InverseExpression inverseExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(JdbcParameter jdbcParameter) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(DoubleValue doubleValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(StringValue stringValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(DateValue dateValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(TimeValue timeValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(TimestampValue timestampValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(SubSelect subSelect) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(CaseExpression caseExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(WhenClause whenClause) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(ExistsExpression existsExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(AllComparisonExpression allComparisonExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(AnyComparisonExpression anyComparisonExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Concat concat) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Matches matches) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(BitwiseAnd bitwiseAnd) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(BitwiseOr bitwiseOr) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(BitwiseXor bitwiseXor) {
        throw new NotImplementedException();
    }
}
