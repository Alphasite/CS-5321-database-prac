package db.query.visitors;

import db.Utilities.Pair;
import db.Utilities.UnionFind;
import db.query.TablePair;
import net.sf.jsqlparser.expression.*;
import net.sf.jsqlparser.expression.operators.arithmetic.*;
import net.sf.jsqlparser.expression.operators.conditional.AndExpression;
import net.sf.jsqlparser.expression.operators.conditional.OrExpression;
import net.sf.jsqlparser.expression.operators.relational.*;
import net.sf.jsqlparser.schema.Column;
import net.sf.jsqlparser.statement.select.SubSelect;
import sun.reflect.generics.reflectiveObjects.NotImplementedException;

import java.util.*;

/**
 * Another expression visitor, handles breaking the WHERE clause into multiple tokens and classify them based
 * on which tables they reference
 */
public class WhereDecomposer2 implements ExpressionVisitor {
    private UnionFind unionFind;
    private List<Pair<TablePair, Expression>> unusableExpressions;
    private Map<TablePair, Expression> joinPredicates;

    private Expression nakedExpression;

    private Queue<String> referencedTables;

    public WhereDecomposer2() {
        this(new UnionFind());
    }

    public WhereDecomposer2(UnionFind unionFind) {
        this.unionFind = unionFind;
        this.nakedExpression = null;
        this.unusableExpressions = new ArrayList<>();

        this.referencedTables = new ArrayDeque<>();
    }

    /**
     * @return the where expression without breaking it down in to join and filter expressions
     */
    public Expression getNakedExpression() {
        return nakedExpression;
    }

    /**
     * @return the table-table expressions which cant be added to the union find
     */
    public List<Pair<TablePair, Expression>> getUnusableExpressions() {
        return unusableExpressions;
    }

    /**
     * @return get the union find generated by this decomposer.
     */
    public UnionFind getUnionFind() {
        return unionFind;
    }

    /**
     * Process a comparison node by retrieving referenced tables from the stack
     *
     * @param comparator the comparator which contains the expression
     * @param isEquals   whether or not the expression is an equals statement
     */
    private void processComparator(BinaryExpression comparator, boolean isEquals) {
        comparator.getLeftExpression().accept(this);
        comparator.getRightExpression().accept(this);

        // Handle constant expressions
        if (referencedTables.size() == 0) {
            if (nakedExpression != null) {
                nakedExpression = new AndExpression(nakedExpression, comparator);
            } else {
                nakedExpression = comparator;
            }
        } else if (referencedTables.size() == 1) {
            referencedTables.poll();
            ExpressionBoundsBuilderVisitor.progressivelyBuildUnionBounds(unionFind, comparator);
        } else {
            String table1 = referencedTables.poll();
            String table2 = referencedTables.poll();

            TablePair pair = new TablePair(table1, table2);

            if (isEquals) {
                ExpressionUnionBuilderVisitor.progressivelyBuildUnionFind(unionFind, comparator);
            } else {
                unusableExpressions.add(new Pair<>(pair, comparator));
            }
        }
    }

    /**
     * @inheritDoc
     */
    @Override
    public void visit(Column column) {
        this.referencedTables.offer(column.getTable().getName());
    }

    /**
     * @inheritDoc
     */
    @Override
    public void visit(AndExpression andExpression) {
        andExpression.getLeftExpression().accept(this);
        andExpression.getRightExpression().accept(this);
    }


    ////////////////////////////////////////////////////
    // Trivial
    ////////////////////////////////////////////////////

    @Override
    public void visit(EqualsTo equalsTo) {
        processComparator(equalsTo, true);
    }

    @Override
    public void visit(GreaterThan greaterThan) {
        processComparator(greaterThan, false);
    }

    @Override
    public void visit(GreaterThanEquals greaterThanEquals) {
        processComparator(greaterThanEquals, false);
    }

    @Override
    public void visit(MinorThan minorThan) {
        processComparator(minorThan, false);
    }

    @Override
    public void visit(MinorThanEquals minorThanEquals) {
        processComparator(minorThanEquals, false);
    }

    @Override
    public void visit(NotEqualsTo notEqualsTo) {
        processComparator(notEqualsTo, false);
    }

    @Override
    public void visit(Parenthesis parenthesis) {
        parenthesis.getExpression().accept(this);
    }

    ////////////////////////////////////////////////////
    // Not used.
    ////////////////////////////////////////////////////

    @Override
    public void visit(LongValue longValue) {

    }

    @Override
    public void visit(OrExpression orExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Addition addition) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Division division) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Multiplication multiplication) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Subtraction subtraction) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Between between) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(InExpression inExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(IsNullExpression isNullExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(LikeExpression likeExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(NullValue nullValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Function function) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(InverseExpression inverseExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(JdbcParameter jdbcParameter) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(DoubleValue doubleValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(StringValue stringValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(DateValue dateValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(TimeValue timeValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(TimestampValue timestampValue) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(SubSelect subSelect) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(CaseExpression caseExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(WhenClause whenClause) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(ExistsExpression existsExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(AllComparisonExpression allComparisonExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(AnyComparisonExpression anyComparisonExpression) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Concat concat) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(Matches matches) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(BitwiseAnd bitwiseAnd) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(BitwiseOr bitwiseOr) {
        throw new NotImplementedException();
    }

    @Override
    public void visit(BitwiseXor bitwiseXor) {
        throw new NotImplementedException();
    }
}
