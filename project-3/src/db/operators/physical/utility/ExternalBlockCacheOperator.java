package db.operators.physical.utility;

import db.datastore.Database;
import db.datastore.TableHeader;
import db.datastore.tuple.Tuple;
import db.datastore.tuple.TupleReader;
import db.datastore.tuple.TupleWriter;
import db.datastore.tuple.binary.BinaryTupleReader;
import db.datastore.tuple.binary.BinaryTupleWriter;
import db.datastore.tuple.string.StringTupleReader;
import db.datastore.tuple.string.StringTupleWriter;
import db.operators.physical.AbstractOperator;
import db.operators.physical.Operator;
import db.operators.physical.PhysicalTreeVisitor;
import db.operators.physical.SeekableOperator;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.UUID;

/**
 * A wrapper around a temporary data buffer generated by a complex operator implementation (ie. External Merge Sort).
 * Holds a buffer file descriptor that can be used to write the output of an intermediate operator evaluation. After
 * flushing, contents are written to disk and the buffer becomes available for read-only access, allowing to retrieve
 * previously computed data.
 */
public class ExternalBlockCacheOperator extends AbstractOperator implements SeekableOperator {
    private final TableHeader header;
    private final Path bufferFile;

    private TupleWriter writer;
    private TupleReader reader;

    private boolean flushed;

    private static final boolean USE_BINARY_PAGES = true;

    /**
     * Create a new cache operator using specified buffer file name
     *
     * @param header        Tuple layout
     * @param tempDirectory Buffer directory
     * @param fileName      Buffer file name
     */
    public ExternalBlockCacheOperator(TableHeader header, Path tempDirectory, String fileName) {
        this.header = header;

        if (!Files.exists(tempDirectory)) {
            try {
                Files.createDirectories(tempDirectory);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }

        this.bufferFile = tempDirectory.resolve(fileName);
        this.writer = getWriter(header, bufferFile);
        this.reader = null;
        this.flushed = false;
    }

    /**
     * Generate a cache with a random buffer name
     * @param header Tuple layout
     * @param tempDirectory Buffer directory
     */
    public ExternalBlockCacheOperator(TableHeader header, Path tempDirectory) {
        this(header, tempDirectory, UUID.randomUUID().toString());
    }

    /**
     * @return the path of the output buffer
     */
    public Path getBufferFile() {
        return bufferFile;
    }

    /**
     * Close open file descriptors and delete buffer file
     */
    public void delete() {
        try {
            this.close();
            Files.deleteIfExists(bufferFile);
        } catch (IOException e) {
            System.out.println("Failed to delete:" + bufferFile);
        }
    }

    /**
     * @inheritDoc
     */
    @Override
    public void seek(long index) {
        if (!flushed) {
            this.flush();
        }

        this.reader.seek(index);
    }

    /**
     * @inheritDoc
     */
    @Override
    protected Tuple generateNextTuple() {
        if (!flushed) {
            this.flush();
        }

        return this.reader.next();
    }

    /**
     * Write the tuple the underlying buffer file. It can only write to open streams.
     *
     * @param tuple the tuple to write.
     */
    public void writeTupleToBuffer(Tuple tuple) {
        if (flushed) {
            throw new RuntimeException("Cant write to flushed buffer.");
        }

        this.writer.write(tuple);
    }

    /**
     * Dump contents of source into buffer file.
     *
     * Can only write to open streams.
     *
     * @param source the operator which is to be dumped to the buffer.
     */
    public void writeSourceToBuffer(Operator source) {
        if (flushed) {
            throw new RuntimeException("Cant write to flushed buffer.");
        }

        source.dump(writer);
    }

    /**
     * Write specified number of pages from source into buffer file.
     *
     * Can only write to open streams.
     *
     * @param source the source operator
     * @param pagesToIngest the number of pages of relations to fetch from the child.
     */
    public void writeSourceToBuffer(Operator source, int pagesToIngest) {
        if (flushed) {
            throw new RuntimeException("Cant write to flushed buffer.");
        }

        BlockCacheOperator page = new BlockCacheOperator(source, Database.PAGE_SIZE);

        for (int i = 0; i < pagesToIngest; i++) {
            page.loadNextBlock();
            page.dump(writer);
        }
    }

    /**
     * @inheritDoc
     */
    @Override
    public void close() {
        if (writer != null) {
            this.writer.flush();
            this.writer.close();
        }

        if (this.reader != null) {
            this.reader.close();
        }
    }

    /**
     * Flush any tuples to disk and close the writer, opening a reader.
     */
    public void flush() {
        this.writer.flush();
        this.writer.close();
        this.writer = null;

        this.reader = getReader(header, bufferFile);
        this.flushed = true;
    }

    /**
     * Get a new reader for the buffer.
     *
     * @param header the header of the buffer
     * @param path the path of the buffer
     * @return a reader for the buffer
     */
    private TupleReader getReader(TableHeader header, Path path) {
        if (USE_BINARY_PAGES)
            return BinaryTupleReader.get(path);
        else
            return StringTupleReader.get(header, path);
    }

    /**
     * Get a new writer for the underlying buffer.
     *
     * @param header the header for the buffer
     * @param path the path for the buffer file
     * @return the writer
     */
    private TupleWriter getWriter(TableHeader header, Path path) {
        if (USE_BINARY_PAGES)
            return BinaryTupleWriter.get(header, path);
        else
            return StringTupleWriter.get(path);
    }

    /**
     * @inheritDoc
     */
    @Override
    public TableHeader getHeader() {
        return this.header;
    }

    /**
     * @inheritDoc
     */
    @Override
    public boolean reset() {
        this.reader.seek(0);
        return true;
    }

    /**
     * @inheritDoc
     */
    @Override
    public void accept(PhysicalTreeVisitor visitor) {
        // Not implemented, is an internal node.
    }

}
